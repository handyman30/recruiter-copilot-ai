// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Subscription fields
  subscriptionStatus    String?   @default("FREE") // FREE, ACTIVE, CANCELLED, EXPIRED
  subscriptionPlan      String?   @default("free") // free, pro_monthly, pro_yearly
  subscriptionId        String?   // PayPal subscription ID
  subscriptionStartDate DateTime?
  subscriptionEndDate   DateTime?
  
  // Relations
  jobDescriptions JobDescription[]
  candidates      Candidate[]
  analyses        Analysis[]
}

model JobDescription {
  id          String   @id @default(cuid())
  userId      String   // Foreign key to User
  title       String
  company     String?
  fileUrl     String?  // Store file path or S3 URL
  parsedText  String   @db.Text
  skills      Json     // Array of required skills
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyses    Analysis[]
}

model Candidate {
  id             String   @id @default(cuid())
  userId         String   // Foreign key to User
  name           String
  email          String?
  phone          String?
  fileUrl        String?
  parsedText     String   @db.Text
  
  // Auto-generated tags
  location       String?
  seniority      String?
  techStack      Json     // Array of skills
  
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyses       Analysis[]
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Analysis {
  id              String   @id @default(cuid())
  userId          String   // Foreign key to User
  candidateId     String
  jobId           String
  
  matchPercentage Int
  topSkills       Json     // Array of top 3 skills
  missingSkills   Json     // Array of missing skills
  
  generatedMessage String?  @db.Text
  messageTemplate  String?  // 'high_match' | 'mid_match' | 'low_match'
  
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  candidate       Candidate    @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  job             JobDescription @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([candidateId, jobId]) // Prevent duplicate analyses
} 